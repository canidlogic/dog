package Dog::Preprocessor;
use strict;

# Core dependencies
use Encode qw(encode);

# Non-core dependencies
use JSON::Tiny qw(decode_json);

=head1 NAME

Dog::Preprocessor - Dog template preprocessor plug-in for Yip.

=head1 SYNOPSIS

  package YipConfig;
  use parent qw(Exporter);
  use Dog::Preprocessor;
  
  our @EXPORT = qw($config_dbpath);
  our @EXPORT_OK = qw(config_preprocessor);
  
  $config_dbpath = '/example/path/to/cms/db.sqlite';
  
  sub config_preprocessor { 
    ($#_ == 1) or die "Wrong number of parameters, stopped";
    my $tmpl = shift;
    my $vars = shift;
    Dog::Preprocessor->handle($tmpl, $vars);
  }
  
  1;

=head1 DESCRIPTION

This module is a plug-in preprocessor for Yip that provides additional
processing needed to generate gallery pages.

In order for Dog to function correctly on Yip, this preprocessor must be
installed in the Yip deployment.  To do this, include a directory C<Dog>
somewhere in the include path used for all CGI scripts of the Yip
deployment, and put this module C<Preprocessor.pm> within that directory
named C<Dog>.  The recommended method is to have the C<Dog> directory
have the same parent directory as the C<Yip> directory that holds the
Yip modules.

After that, define the C<YipConfig.pm> module in the format given in the
synopsis, except change the value of C<config_dbpath> to the proper path
to the SQLite database holding the Yip CMS.  This configuration file
will invoke this Dog preprocessor module through C<config_preprocessor>.

See the documentation of the C<handle> function in this module for
further details about what this preprocessor does.

=head1 CLASS METHODS

=over 4

=item B<handle(tmpl, vars)>

This is the preprocessor function, which must be invoked as a class
method of this module.

C<tmpl> is a string that names the specific template that preprocessing
is being requested for.  This preprocessor function only does something
if C<tmpl> is equal to C<post> and otherwise returns without doing any
preprocessing.

C<vars> is a hash reference that contains all the template variables
that are about to be used to run a template, in the structure expected
by the C<HTML::Template> module.  Note that all strings are binary
encoded in UTF-8.

When C<tmpl> is equal to C<post>, then this preprocessor will modify the
passed hash reference.  First, it will verify that C<_code> is defined
as a scalar property (which is standard for post templates).  This
variable holds the code that was generated from the template code for
the post when running in the full profile.  For template code generated
by the C<dogpack.pl> script, this C<_code> value should be a JSON
description of the contents of the gallery.

This JSON description is parsed by this preprocessor to get the gallery
name, the gallery description, and a list of attachment indices to the
photos in this gallery, using the largest resolution profile available
for each photo.

This preprocessor will then set a template variable named C<gname> equal
to the provided gallery name, and a template variable named C<gdesc>
equal to the provided gallery description.

This preprocessor will also set a template variable named C<photos>
equal to a template array.  Each element of this template array has the
properties C<path_full> (the path to the largest-resolution version of
the photo), C<path_tiny> (the path to the Tiny resolution version of the
photo) and C<ati_full> (the attachment index of the largest-resolution
version of the photo).

If any of these new variables are already defined, they will be
overwritten by this preprocessor.

The additional template variables generated by this preprocessor are
enough to allow the gallery template to be generated.

=cut

sub handle {
  
  # Check parameter count
  ($#_ == 2) or die "Wrong number of parameters, stopped";
  
  # Discard class parameter
  shift;
  
  # Get and check parameter types
  my $tmpl = shift;
  my $vars = shift;
  
  (not ref($tmpl)) or die "Wrong parameter type, stopped";
  (ref($vars) eq 'HASH') or die "Wrong parameter type, stopped";
  
  # Do nothing unless we are handling a post
  unless ($tmpl eq 'post') {
    return;
  }
  
  # Make sure that vars has the required properties and that all of
  # these are scalars
  for my $rpn ('_code', '_uid', 'uri_photo') {
    (defined $vars->{$rpn}) or
      die "Missing template variable '$rpn', stopped";
    (not ref($vars->{$rpn})) or
      die "Template variable '$rpn' must be scalar, stopped";
  }
  
  # Decode the JSON that should be packed in the _code variable
  my $json;
  eval {
    $json = decode_json $vars->{'_code'};
  };
  if ($@) {
    die "Failed to parse post JSON: $@";
  }
  
  # Make sure the JSON is in the proper format
  (ref($json) eq 'HASH') or die "Post JSON is not an object, stopped";
  
  for my $rpn ('gname', 'gdesc') {
    (defined $json->{$rpn}) or
      die "Post JSON is missing '$rpn' property, stopped";
    (not ref($json->{$rpn})) or
      die "Post JSON '$rpn' property must be scalar, stopped";
    ($json->{$rpn} =~ /\A[\x{1}-\x{d7ff}\x{e000}-\x{10ffff}]*\z/) or
      die "Post JSON '$rpn' property has bad codepoints, stopped";
  }
  
  (defined $json->{'photos'}) or
    die "Post JSON is missing 'photos' property, stopped";
  (ref($json->{'photos'}) eq 'ARRAY') or
    die "Post JSON 'photos' property must be array, stopped";
  for my $ae (@{$json->{'photos'}}) {
    (not ref($ae)) or
      die "Post JSON 'photos' may only contain scalars, stopped";
    ($ae =~ /\A[1-9][0-9]{3}\z/) or
      die "Post JSON 'photos' contains invalid value: '$ae'";
  }
  
  # Get the photo URI and append the UID of this gallery to it to form
  # the photobase
  my $photobase = $vars->{'uri_photo'} . $vars->{'_uid'};
  
  # Add gname and gdesc to the template variables, encoding them into
  # binary UTF-8
  $vars->{'gname'} = encode(
                        'UTF-8', $json->{'gname'},
                        Encode::FB_CROAK | Encode::LEAVE_SRC);
  $vars->{'gdesc'} = encode(
                        'UTF-8', $json->{'gdesc'},
                        Encode::FB_CROAK | Encode::LEAVE_SRC);
  
  # Build a photos template array
  my @photos;
  for my $p (@{$json->{'photos'}}) {
    # Get current photo attachment index of largest resolution
    my $ati_max = int($p);
    
    # Figure out the thumbnail attachment index
    my $ati_tiny;
    if (($ati_max >= 1000) and ($ati_max <= 2999)) {
      $ati_tiny = $ati_max;
      
    } elsif (($ati_max >= 3000) and ($ati_max <= 4999)) {
      $ati_tiny = $ati_max - 2000;
      
    } elsif (($ati_max >= 5000) and ($ati_max <= 6999)) {
      $ati_tiny = $ati_max - 4000;
    
    } elsif (($ati_max >= 7000) and ($ati_max <= 8999)) {
      $ati_tiny = $ati_max - 6000;
      
    } else {
      die "Unexpected";
    }
    
    # Define this array element
    my %nae = (
      path_full => "$photobase$ati_max",
      path_tiny => "$photobase$ati_tiny",
      ati_full  => $ati_max
    );
    
    # Add the new element to the array
    push @photos, (\%nae);
  }
  
  # Add the photos template variable
  $vars->{'photos'} = \@photos;
}

=back

=head1 AUTHOR

Noah Johnson, C<noah.johnson@loupmail.com>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2022 Multimedia Data Technology Inc.

MIT License:

Permission is hereby granted, free of charge, to any person obtaining a
copy of this software and associated documentation files
(the "Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be included
in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

=cut

# End with something that evaluates to true
#
1;
